name: CI & Publish â€” Apache Ranger Plugin

on:
  push:
    branches:
      - 'feature/**'
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write   # needed to push tags and create releases

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.findjar.outputs.jar }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 11

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run build and produce fat JAR (shadow)
        run: ./gradlew :apache-ranger-plugin:clean :apache-ranger-plugin:shadowJar --no-daemon

      - name: Locate built JAR
        id: findjar
        run: |
          set -e
          JAR=$(ls apache-ranger-plugin/build/libs/apache-ranger-plugin-*.jar 2>/dev/null | head -n 1 || true)
          if [ -z "$JAR" ]; then
            echo "No jar found in apache-ranger-plugin/build/libs/" >&2
            ls -la apache-ranger-plugin/build/libs || true
            exit 1
          fi
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "Found: $JAR"

      - name: Upload built JAR (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: apache-ranger-plugin-jar
          path: ${{ steps.findjar.outputs.jar }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    # only run publish after a merge pushed to main
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags origin

      - name: Determine or create release tag (reuse existing tag from feature if present)
        id: determine_tag
        run: |
          set -e
          COMMIT=${GITHUB_SHA}
          echo "Merged commit: $COMMIT"

          TAG=""
          # iterate tags newest first and find first tag whose commit is ancestor of merged commit
          while read -r tagName tagSHA; do
            if git merge-base --is-ancestor "$tagSHA" "$COMMIT"; then
              TAG="$tagName"
              break
            fi
          done < <(git for-each-ref --sort=-creatordate --format='%(refname:short) %(objectname)' refs/tags)

          if [ -n "$TAG" ]; then
            echo "Found existing tag reachable from merge: $TAG"
          else
            SHORT_SHA=$(echo $COMMIT | cut -c1-7)
            TAG=release-${SHORT_SHA}-$(date +%Y%m%d%H%M%S)
            echo "No existing tag found; creating tag: $TAG"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release tag for merged commit $COMMIT"
            git push origin "$TAG"
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Determined tag: $TAG"

      - name: Download built JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: apache-ranger-plugin-jar
          path: ./artifact

      - name: Locate artifact JAR
        id: findjar
        run: |
          set -e
          JAR=$(ls artifact/apache-ranger-plugin-*.jar 2>/dev/null | head -n 1 || true)
          if [ -z "$JAR" ]; then
            echo "No jar found in artifact/" >&2
            ls -la artifact || true
            exit 1
          fi
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "Artifact found: $JAR"
          
      - name: Set up JDK 11 and Maven settings for publishing
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 11
          server-id: github
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.PAT_TOKEN }}
      
      - name: Create GitHub Release and upload JAR
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_tag.outputs.tag }}
          name: ${{ steps.determine_tag.outputs.tag }}
          files: ${{ steps.findjar.outputs.jar }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Publish to GitHub Packages (Maven)
      #   env:
      #     GITHUB_ACTOR: ${{ github.actor }}
      #     GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      #   run: |
      #     # pass releaseVersion to gradle so publishing coordinates match tag if needed
      #     ./gradlew :apache-ranger-plugin:publish --no-daemon -PreleaseVersion=${{ steps.determine_tag.outputs.tag }}